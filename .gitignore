# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
import turtle
import random as r
Width, HEIGHT = 500, 500
COLOR = ["red","blue","pink","black","orange"]
def A():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(3)
    racer.penup()
    racer.pendown()
    racer.pensize(5)

    racer.left(75)
    racer.forward(100)
    racer.right(145)
    racer.forward(50)
    racer.left(70)
    racer.backward(29)
    racer.right(105)
    racer.backward(50)
    racer.right(145)
    racer.backward(100)
    racer.right(110)
    racer.penup()
    racer.right(0)
    racer.forward(25)
    racer.pendown()
def B():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(45)
    racer.right(90)
    radius = 25 # Radius of the circle
    racer.circle(radius, 180)
    racer.left(90)
    racer.forward(100)
    racer.left(90)
    radius = 25  # Radius of the circle
    racer.circle(radius, 180)
    racer.left(90)
    racer.forward(45)
    racer.penup()
    racer.left(90)
    racer.forward(25)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def C():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.forward(45)
    racer.pendown()
    radius = 46
    racer.left(0)
    racer.penup()
    racer.circle(radius,180)
    racer.pendown()
    racer.circle(radius,180)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def D():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    radius = 46
    racer.left(0)
    racer.circle(radius, 180)
    racer.left(90)
    racer.forward(2*radius)
    racer.left(90)
    racer.penup()
    racer.forward(75)
    racer.pendown()

def E():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.right(90)
    racer.forward(35)
    racer.backward(35)
    racer.right(90)
    racer.forward(45)
    racer.left(90)
    racer.forward(35)
    racer.backward(35)
    racer.right(90)
    racer.forward(45)
    racer.left(90)
    racer.forward(35)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def F():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.right(90)
    racer.forward(35)
    racer.backward(35)
    racer.right(90)
    racer.forward(45)
    racer.left(90)
    racer.forward(35)
    racer.backward(35)
    racer.right(90)
    racer.forward(45)
    racer.left(90)
    racer.penup()
    racer.forward(60)
    racer.pendown()

def G():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(3)
    racer.penup()
    racer.forward(45)
    racer.pendown()
    radius = 46
    racer.left(0)
    racer.penup()
    racer.circle(radius, 180)
    racer.pendown()
    racer.circle(radius, 270)
    racer.left(90)
    racer.forward(40)
    racer.left(90)
    racer.forward(20)
    racer.penup()
    racer.left(90)
    racer.forward(40)
    racer.right(90)
    racer.forward(25)
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def H():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.backward(45)
    racer.right(90)
    racer.forward(45)
    racer.left(90)
    racer.forward(45)
    racer.backward(90)
    racer.right(90)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def I():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.forward(45)
    racer.backward(22.5)
    racer.left(90)
    racer.forward(90)
    racer.left(90)
    racer.forward(22.5)
    racer.backward(45)
    racer.penup()
    racer.left(90)
    racer.forward(90)
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def J():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.penup()
    racer.forward(25)
    racer.pendown()
    racer.right(180)
    racer.circle(25,180)
    racer.forward(65)
    racer.penup()
    racer.backward(91)
    racer.right(90)
    racer.forward(25)
    racer.pendown()

def K():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.backward(45)
    racer.right(45)
    racer.forward(60)
    racer.backward(60)
    racer.right(90)
    racer.forward(60)
    racer.backward(60)
    racer.right(45)
    racer.penup()
    racer.forward(45)
    racer.left(90)
    racer.forward(70)
    racer.pendown()

def L():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.backward(90)
    racer.right(90)
    racer.forward(45)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def M():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.right(160)
    racer.forward(90)
    racer.left(140)
    racer.forward(90)
    racer.right(160)
    racer.forward(90)
    racer.penup()
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def N():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(90)
    racer.right(150)
    racer.forward(100)
    racer.left(150)
    racer.forward(90)
    racer.penup()
    racer.backward(90)
    racer.right(90)
    racer.forward(25)
    racer.pendown()

def O():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.forward(50)
    racer.pendown()
    racer.circle(45)
    racer.penup()
    racer.forward(75)
    racer.pendown()

def P():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(45)
    racer.right(90)
    radius = 25  # Radius of the circle
    racer.circle(radius, 180)
    racer.left(90)
    racer.forward(90)
    racer.penup()
    racer.left(90)
    racer.forward(25)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def Q():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.forward(50)
    racer.pendown()
    racer.circle(45)
    racer.penup()
    racer.forward(25)
    racer.left(140)
    racer.pendown()
    racer.pensize(5)
    racer.forward(30)
    racer.backward(30)
    racer.right(140)
    racer.penup()
    racer.forward(50)
    racer.pendown()

def R():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.forward(45)
    racer.right(90)
    radius = 25  # Radius of the circle
    racer.circle(radius, 180)
    racer.left(90)
    racer.forward(50)
    racer.left(35)
    racer.forward(48)
    racer.backward(48)
    racer.right(35)
    racer.forward(45)
    racer.penup()
    racer.left(90)
    racer.forward(25)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def S():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.left(90)
    racer.forward(20)
    racer.pendown()
    radius = 23
    racer.right(180)
    racer.circle(radius, 270)
    racer.left(180)
    racer.penup()
    racer.circle(radius, 90)
    racer.pendown()
    racer.circle(radius, 270)
    racer.penup()
    racer.right(90)
    racer.forward(46)
    racer.left(90)
    racer.forward(48)
    racer.pendown()

def T():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.forward(30)
    racer.pendown()
    racer.left(90)
    racer.forward(90)
    racer.left(90)
    racer.forward(30)
    racer.backward(55)
    racer.penup()
    racer.left(90)
    racer.forward(90)
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def U():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.penup()
    racer.forward(22)
    racer.pendown()
    racer.forward(68)
    racer.backward(68)
    racer.right(180)
    racer.circle(22,180)
    racer.forward(68)
    racer.backward(68)
    racer.penup()
    racer.backward(22)
    racer.right(90)
    racer.forward(25)
    racer.pendown()

def V():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.penup()
    racer.forward(90)
    racer.pendown()
    racer.right(160)
    racer.forward(90)
    racer.left(135)
    racer.forward(90)
    racer.right(155)
    racer.penup()
    racer.forward(90)
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def W():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.left(90)
    racer.penup()
    racer.forward(90)
    racer.pendown()
    racer.right(165)
    racer.forward(90)
    racer.left(150)
    racer.forward(90)
    racer.right(150)
    racer.forward(90)
    racer.left(150)
    racer.forward(92)
    racer.penup()
    racer.right(165)
    racer.forward(90)
    racer.left(90)
    racer.forward(25)
    racer.pendown()

def X():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(5)
    racer.penup()
    racer.left(90)
    racer.forward(90)
    racer.right(140)
    racer.pendown()
    racer.forward(100)
# first line complete
    racer.penup()
    racer.left(140)
    racer.forward(80)
#     now secnd line
    racer.left(140)
    racer.pendown()
    racer.forward(105)
    racer.penup()
    racer.left(130)
    racer.forward(100)
    racer.pendown()

def Y():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.forward(25)
    racer.pendown()
    racer.left(90)
    racer.forward(50)
    racer.left(30)
    racer.forward(50)
    racer.backward(50)
    racer.right(60)
    racer.forward(50)
    racer.backward(50)
    racer.penup()
    racer.right(150)
    racer.forward(50)
    racer.left(90)
    racer.forward(50)
    racer.pendown()

def Z():
    racer.speed(6)
    color = r.choice(COLOR)
    racer.pencolor(color)
    racer.pensize(4)
    racer.penup()
    racer.left(90)
    racer.forward(90)
    racer.right(90)
    racer.pendown()
    racer.forward(90)
    racer.right(135)
    racer.forward(130)
    racer.left(135)
    racer.forward(90)
    racer.penup()
    racer.forward(25)
    racer.pendown()

def draw_alphabet(alp):
    if alp == "A":
        A()
    elif alp == "B":
        B()
    elif alp == "C":
        C()
    elif alp == "D":
        D()
    elif alp == "E":
        E()
    elif alp == "F":
        F()
    elif alp == "G":
        G()
    elif alp == "H":
        H()
    elif alp == "I":
        I()
    elif alp == "J":
        J()
    elif alp == "K":
        K()
    elif alp == "L":
        L()
    elif alp == "M":
        M()
    elif alp == "N":
        N()
    elif alp == "O":
        O()
    elif alp == "P":
        P()
    elif alp == "Q":
        Q()
    elif alp == "R":
        R()
    elif alp == "S":
        S()
    elif alp == "T":
        T()
    elif alp == "U":
        U()
    elif alp == "V":
        V()
    elif alp == "W":
        W()
    elif alp == "X":
        X()
    elif alp == "Y":
        Y()
    elif alp == "Z":
        Z()
    elif alp == " ":
        racer.penup()
        racer.right(90)
        racer.forward(120)  # Move down to the next line
        racer.left(90)
        racer.backward(100 * len(alp))  # Move to the beginning of the line
        racer.pendown()

def init_turtle(screen_width):
    screen = turtle.Screen()
    screen.setup(screen_width, HEIGHT)
    screen.title("AI Printer")
    racer.speed(0)
    racer.penup()
    racer.goto(-screen_width // 2 + 50, 0)
    racer.pendown()

def decide_alpha():
    name = input("Please Enter your Name: ").upper()
    if name.replace(" ", "").isalpha():  # Allow spaces in the name
        screen_width = 500 + 50 * len(name.replace(" ", ""))
        init_turtle(screen_width)
        for alp in name:
            draw_alphabet(alp)
        turtle.done()




racer = turtle.Turtle()
decide_alpha()
#.idea/
